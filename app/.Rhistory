# Democratic Afinn Sentiment
# head(get_sentiments("afinn"))
demo.emotion.af <- merge(x = tdm.demo.overall, y = get_sentiments("afinn"), by.x = "term", by.y = "word")
names(demo.emotion.af)[names(demo.emotion.af) == "sum(count)"] <- "Frequency"
demo.sum.emotion.af <- demo.emotion.af %>%
select(Frequency, score)
# colSums(table(demo.sum.emotion.af))
barplot(colSums(table(demo.sum.emotion.af)), col = "lightskyblue3",
main = "Democratic Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names=1)
# Republican Afinn Sentiment
# head(get_sentiments("afinn"))
repu.emotion.af <- merge(x = tdm.repu.overall, y = get_sentiments("afinn"), by.x = "term", by.y = "word")
names(repu.emotion.af)[names(repu.emotion.af) == "sum(count)"] <- "Frequency"
repu.sum.emotion.af <- repu.emotion.af %>%
select(Frequency, score)
# colSums(table(repu.sum.emotion.af))
barplot(colSums(table(repu.sum.emotion.af)), col = "lightskyblue3",
main = "Republican Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names = 1)
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Words")
library(quantmod)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
library(quantmod)
# data<-getSymbols("AAPL", auto.assign = F, from = "2017-01-01", to = "2018-01-01")[, 4]
stock_sym <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DWDP", "XOM", "GE", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD", "MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ", "v", "WMT", "DIS")
n <- 30
data_sig <- matrix()
for(i in 1 : 30){
data_sig <- getSymbols(stock_sym[i], auto.assign = F, from = "2017-01-01",
to = "2018-01-01")[, 4]
data <- data.frame(data_sig[i])
}
library(zoo)
library(TTR)
library(quantmod)
n <- 30
data_sig <- matrix()
for(i in 1 : 30){
data_sig <- getSymbols(stock_sym[i], auto.assign = F, from = "2017-01-01",
to = "2018-01-01")[, 4]
data <- data.frame(data_sig[i])
}
1 :n
n <- 30
data_sig <- matrix()
for(i in 1 : n){
data_sig <- getSymbols(stock_sym[i], auto.assign = F, from = "2017-01-01",
to = "2018-01-01")[, 4]
data <- data.frame(data_sig[i])
}
library(downloader)
install.packages("downloader")
R.version()
R.version
library(quantmod)
# data<-getSymbols("AAPL", auto.assign = F, from = "2017-01-01", to = "2018-01-01")[, 4]
stock_sym <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DWDP", "XOM", "GE", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD", "MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ", "v", "WMT", "DIS")
n <- 30
data_sig <- matrix()
for(i in 1 : n){
data_sig <- getSymbols(stock_sym[i], auto.assign = F, from = "2017-01-01",
to = "2018-01-01")[, 4]
data <- data.frame(data_sig[i])
}
stock_sym[1]
stock_sym[4]
library(quantmod)
# data<-getSymbols("AAPL", auto.assign = F, from = "2017-01-01", to = "2018-01-01")[, 4]
stock_sym <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DWDP", "XOM", "GE", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD", "MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ", "v", "WMT", "DIS")
n <- 30
data_sig <- matrix()
for(i in 1 : n){
data_sig <- getSymbols(stock_sym[i], auto.assign = F, from = "2017-01-01",
to = "2018-01-01")[, 4]
# data <- data.frame(data_sig[i])
}
library(quantmod)
# data<-getSymbols("AAPL", auto.assign = F, from = "2017-01-01", to = "2018-01-01")[, 4]
stock_sym <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DWDP", "XOM", "GE", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD", "MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ", "v", "WMT", "DIS")
n <- 30
data_sig <- matrix()
for(i in 1 : n){
data_sig <- getSymbols.google(stock_sym[i], auto.assign = F, from = "2017-01-01",
to = "2018-01-01",env = .GlobalEnv)[, 4]
# data <- data.frame(data_sig[i])
}
data<-getSymbols("AAPL", auto.assign = F, from = "2017-01-01", to = "2018-01-01")[, 4]
stock_sym <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DIS", "DWDP", "XOM", "GE", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD", "MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ", "V", "WMT")
n <- 30
data_sig <- c()
for(i in 1 : n){
data_sig <- getSymbols(stock_sym[i], auto.assign = F, from = "2017-01-01",
to = "2018-01-01")[, 4]
data <- data.frame(data_sig[i])
}
length(stock_sym)
stock_sym <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DIS", "DWDP", "XOM", "GE", "GS", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD", "MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ", "V", "WMT")
data<-getSymbols("AAPL", auto.assign = F, from = "2017-01-01", to = "2018-01-01")[, 4]
class(data)
# if (!require("DT")) install.packages('DT')
# if (!require("dtplyr")) install.packages('dtplyr')
# if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
library(ggmap)
install.packages("ggmap")
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
mh2009.use=
mh2009%>%
mutate(sale.month=month(as.Date(SALE.DATE, "%m/%d/%y")))%>%
mutate(sale.price=ifelse(SALE.PRICE==0, NA, SALE.PRICE))%>%
mutate(footage=ifelse(GROSS.SQUARE.FEET==0, NA, GROSS.SQUARE.FEET))%>%
mutate(unit.price=sale.price/footage)%>%
mutate(bldg.type=substr(BUILDING.CLASS.CATEGORY, 1, 2))%>%
filter(bldg.type %in% c("10", "13", "25", "28"))%>%
arrange(bldg.type)
save(mh2009.use, file="../output/mh2009use.RData")
man.nbhd=c("Central Harlem", "Chelsea and Clinton",
"East Harlem", "Gramercy Park and Murray Hill",
"Greenwich Village and Soho", "Lower Manhattan",
"Lower East Side", "Upper East Side", "Upper West Side",
"Inwood and Washington Heights")
zip.nbhd=list(1:length(man.nbhd))
zip.nbhd[[1]]=c(10026, 10027, 10030, 10037, 10039)
zip.nbhd[[2]]=c(10001, 10011, 10018, 10019, 10020)
zip.nbhd[[3]]=c(10036, 10029, 10035)
zip.nbhd[[4]]=c(10010, 10016, 10017, 10022)
zip.nbhd[[5]]=c(10012, 10013, 10014)
zip.nbhd[[6]]=c(10004, 10005, 10006, 10007, 10038, 10280)
zip.nbhd[[7]]=c(10002, 10003, 10009)
zip.nbhd[[8]]=c(10021, 10028, 10044, 10065, 10075, 10128)
zip.nbhd[[9]]=c(10023, 10024, 10025)
zip.nbhd[[10]]=c(10031, 10032, 10033, 10034, 10040)
library(quantmod)
stock_sym <- c("MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DWDP", "XOM", "GE", "GS", "HD", "IBM", "INTC", "JNJ", "JPM", "MCD", "MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UNH", "UTX", "VZ", "V", "WMT", "DIS")
n <- 30
data <- data.frame(matrix(nrow = 251, ncol = 30))
colnames(data) <- stock_sym
for(i in 1 : 30){
data[, i] <- getSymbols(stock_sym[i], auto.assign = F,
from = "2017-01-01", to = "2018-01-01")[, 4]
}
PCA_1 <- princomp(data, cor = FALSE)
plot(PCA_1)
biplot(PCA_1)
PCA_2 <- princomp(data, cor = TRUE)
plot(PCA_2)
biplot(PCA_2)
data <- sapply(data, as.numeric)
n <- dim(data)[1] # row
m <- dim(data)[2] # column
data_return <- data.frame(matrix(ncol = m, nrow = n - 1))
colnames(data_return) <- colnames(data)
for (j in 1 : m) {
for (i in 1 : n - 1) {
data_return[i, j] <- (data[i + 1, j] - data[i , j])/data[i , j]
}
}
PCA_3 <- princomp(data, cor = TRUE)
plot(PCA_3)
biplot(PCA_3)
View(data_return)
PCA_3 <- princomp(data_return, cor = TRUE)
plot(PCA_3)
biplot(PCA_3)
data[3, 3]
data[!:3, 1:3]
data[1:3, 1:3]
data[1:5, 1:5]
library(leaflet)
ny <- leaflet()
ny <- addTiles(ny)
ny <- setView(ny, lng = -74.0060, lat = 40.7128, zoom = 10)
ny
shiny::runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
shinyUI(
leafletOutput("mymap"),
fluidPage(
titlePanel('Parties in New York'),
sidebarPanel(
dateRangeInput('daterange1', label = h3('Date range:'), start = '2015-12-31',
end = '2016-12-31', min = '2015-12-31', max = '2016-12-31',
format = 'mm/dd/yy', separator = ' - '),
sliderInput('time', label = h3('Time:'), min = 0, max = 24, value = c(0, 24),
step = 1, sep = ':'),
checkboxGroupInput('locationtype',
label = h3('Party Type'),
choiceNames = list('Store/Commercial', 'House', 'Club/Bar'),
choiceValues = list(1, 2, 3)
),
textInput('zipcode', label = h3('Zip Code'), value = '99999'),
selectInput('weekday', label = h3('Weekdays or Weekends'),
choices = list('the whole week' = 1, 'Weekdays' = 2,
'Weekends' =  3)),
checkboxInput('noise', label = 'Noise', value = FALSE),
checkboxGroupInput('crimetype', label = h3('Crime Type'),
choiceNames = list('felony', 'misdemeanor'), choiceValues = list(1, 2)),
textOutput('locaty'),
textOutput('dater'),
verbatimTextOutput('time1'),
textOutput('zip'),
textOutput('noise1')
)
)
)
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
runApp('C:/Users/xinro/Desktop/project 2')
library(MASS)
library(quadprog)
install.packages("quadprog")
library(MASS)
library(quadprog)
data <- read.csv("hw3.csv")
n <- nrow(data)
#calculate log return
return <- log(data[2:n,-1]/data[1:n-1,-1])
mu <- colMeans(return)
sigma <- cov(return)
# target portfolio return
muP <- seq(.0001, .002, length=200)
# sd of portfolio return
sdP = muP
# storage for portfolio weights
weight <- matrix(0, nrow = 200, ncol = 3)
# find the optimal portfolios
for(i in 1:length(muP)){
result <- solve.QP(Dmat = 2*sigma, dvec = rep(0,3),
Amat = cbind(rep(1,3), mu),
bvec = c(1, muP[i]), meq = 2)
sdP[i] <- sqrt(result$value)
weight[i, ] <- result$solution
}
# efficient frontier
plot(sdP, muP, type = "l", xlim = c(0.01, 0.03), ylim = c(0, .0012), lwd = 3, col = "red")
text(sqrt(sigma[1,1]), mu[1], "CAT", cex = 1.1)
text(sqrt(sigma[2,2]), mu[2], "IBM", cex = 1.1)
text(sqrt(sigma[3,3]), mu[3], "MSFT", cex = 1.1)
res = residuals(fit_reg)
sdP2 <- sdP
muP2 <- seq(min(mu), max(mu), length=200)
for(i in 1:length(muP2)){
result2 <- solve.QP(Dmat = 2*sigma, dvec = rep(0,3),
Amat = cbind(rep(1,3),mu, diag(1,3)),
bvec = c(1, muP2[i], rep(0,3)), meq = 2)
sdP2[i] <- sqrt(result2$value)
weight[i, ] <- result2$solution
}
plot(sdP2, muP2, type = "l", xlim = c(0.01, .03), ylim = c(0, .0012), lwd = 3, col = "blue")
text(sqrt(sigma[1,1]), mu[1], "CAT", cex = 1.1)
text(sqrt(sigma[2,2]), mu[2], "IBM", cex = 1.1)
text(sqrt(sigma[3,3]), mu[3], "MSFT", cex = 1.1)
muP = seq(.0001,.002,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.0015),lty=3,col="red",
xlab = "sigma", ylab = "mu") # efficient frontier
text(sqrt(sigma[1,1]), mu[1], "CAT", cex = 1.1)
text(sqrt(sigma[2,2]), mu[2], "IBM", cex = 1.1)
text(sqrt(sigma[3,3]), mu[3], "MSFT", cex = 1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05),
ylim=c(0,.0015),lwd=3,col="red") # plot the efficient frontier
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # line of
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(.0001,.002,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.0015),lty=3,col="red",
xlab = "sigma", ylab = "mu") # efficient frontier
text(sqrt(sigma[1,1]), mu[1], "CAT", cex = 1.1)
text(sqrt(sigma[2,2]), mu[2], "IBM", cex = 1.1)
text(sqrt(sigma[3,3]), mu[3], "MSFT", cex = 1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05),
ylim=c(0,.0015),lwd=3,col="red") # plot the efficient frontier
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # line of
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
library(MASS)
library(quadprog)
data <- read.csv("hw3.csv")
n <- nrow(data)
#calculate log return
log_return <- log(data[2:n,-1]/data[1:n-1,-1])
#mu <- colMeans(return)
avg_return <- colMeans(return)
sigma <- cov(return)
library(MASS)
library(quadprog)
data <- read.csv("hw3.csv")
n <- nrow(data)
#calculate log return
log_return <- log(data[2:n,-1]/data[1:n-1,-1])
#mu <- colMeans(return)
avg_return <- colMeans(return)
sigma <- cov(return)
# target portfolio return
avg_P <- seq(.0001, .002, length=200)
# sd of portfolio return
sd_P = avg_P
# storage for portfolio weights
weight <- matrix(0, nrow = 200, ncol = 3)
# find the optimal portfolios
for(i in 1:length(avg_P)){
result <- solve.QP(Dmat = 2*sigma, dvec = rep(0,3),
mat = cbind(rep(1,3), avg_return),
bvec = c(1, avg_P[i]), me_q = 2)
sd_P[i] <- sqrt(result$value)
weight[i, ] <- result$solution
}
# target portfolio return
avg_P <- seq(.0001, .002, length=200)
# sd of portfolio return
sd_P = avg_P
# storage for portfolio weights
weight <- matrix(0, nrow = 200, ncol = 3)
# find the optimal portfolios
for(i in 1:length(avg_P)){
result <- solve.QP(Dmat = 2*sigma, dvec = rep(0,3),
Amat = cbind(rep(1,3), avg_return),
bvec = c(1, avg_P[i]), me_q = 2)
sd_P[i] <- sqrt(result$value)
weight[i, ] <- result$solution
}
# target portfolio return
avg_P <- seq(.0001, .002, length=200)
# sd of portfolio return
sd_P = avg_P
# storage for portfolio weights
weight <- matrix(0, nrow = 200, ncol = 3)
# find the optimal portfolios
for(i in 1:length(avg_P)){
result <- solve.QP(Dmat = 2*sigma, dvec = rep(0,3),
Amat = cbind(rep(1,3), avg_return),
bvec = c(1, avg_P[i]), meq = 2)
sd_P[i] <- sqrt(result$value)
weight[i, ] <- result$solution
}
# efficient frontier
plot(sd_P, avg_P, type = "l", xlim = c(0.01, 0.03), ylim = c(0, .0012), lwd = 3, col = "red")
text(sqrt(sigma[1,1]), avg_return[1], "CAT", cex = 1.1)
text(sqrt(sigma[2,2]), avg_return[2], "IBM", cex = 1.1)
text(sqrt(sigma[3,3]), avg_return[3], "MSFT", cex = 1.1)
library(MASS)
library(quadprog)
data <- read.csv("hw3.csv")
n <- nrow(data)
#calculate log return
log_return <- log(data[2:n,-1]/data[1:n-1,-1])
#mu <- colMeans(return)
avg_return <- colMeans(log_return)
sigma <- cov(log_return)
# target portfolio return
avg_P <- seq(.0001, .002, length=200)
# sd of portfolio return
sd_P = avg_P
# storage for portfolio weights
weight <- matrix(0, nrow = 200, ncol = 3)
# find the optimal portfolios
for(i in 1:length(avg_P)){
result <- solve.QP(Dmat = 2*sigma, dvec = rep(0,3),
Amat = cbind(rep(1,3), avg_return),
bvec = c(1, avg_P[i]), meq = 2)
sd_P[i] <- sqrt(result$value)
weight[i, ] <- result$solution
}
# efficient frontier
plot(sd_P, avg_P, type = "l", xlim = c(0.01, 0.03), ylim = c(0, .0012), lwd = 3, col = "red")
text(sqrt(sigma[1,1]), avg_return[1], "CAT", cex = 1.1)
text(sqrt(sigma[2,2]), avg_return[2], "IBM", cex = 1.1)
text(sqrt(sigma[3,3]), avg_return[3], "MSFT", cex = 1.1)
sd_P2 <- sd_P
avg_P2 <- seq(min(avg_return), max(avg_return), length=200)
for(i in 1:length(avg_P2)){
result2 <- solve.QP(Dmat = 2*sigma, dvec = rep(0,3),
Amat = cbind(rep(1,3),avg_return, diag(1,3)),
bvec = c(1, muP2[i], rep(0,3)), meq = 2)
sd_P2[i] <- sqrt(result2$value)
weight[i, ] <- result2$solution
}
plot(sdP2, muP2, type = "l", xlim = c(0.01, .03), ylim = c(0, .0012), lwd = 3, col = "blue")
text(sqrt(sigma[1,1]), mu[1], "CAT", cex = 1.1)
text(sqrt(sigma[2,2]), mu[2], "IBM", cex = 1.1)
text(sqrt(sigma[3,3]), mu[3], "MSFT", cex = 1.1)
avg_P = seq(.0001,.002,length=200) # target portfolio return
sd_P = avg_P # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(avg_P)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),avg_return),bvec=c(1,avg_P[i]),meq=2)
sd_P[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sd_P, avg_P,type="l",xlim=c(0,.04),ylim=c(0,.0015),lty=3,col="red",
xlab = "sigma", ylab = "mu")
# efficient frontier
text(sqrt(sigma[1,1]), mu[1], "CAT", cex = 1.1)
text(sqrt(sigma[2,2]), mu[2], "IBM", cex = 1.1)
text(sqrt(sigma[3,3]), mu[3], "MSFT", cex = 1.1)
ind1 = (sd_P == min(sd_P)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (avg_P > avg_P[ind1])
lines(sd_P[ind2],avg_P[ind2],type="l",xlim=c(0,.05),
ylim=c(0,.0015),lwd=3,col="red") # plot the efficient frontier
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(avg_P-rf)/sd_P # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # line of
points(sd_P[ind3],avg_P[ind3],cex=1.1,pch="x") # show tangency portfolio
shiny::runApp('C:/Users/xinro/Desktop/test')
runApp('C:/Users/xinro/Desktop/test')
runApp('C:/Users/xinro/Desktop/test')
runApp('C:/Users/xinro/Desktop/test')
runApp('C:/Users/xinro/Desktop/test')
runApp('C:/Users/xinro/Desktop/test')
runApp('C:/Users/xinro/Desktop/test')
runApp('C:/Users/xinro/Desktop/test')
runApp('C:/Users/xinro/Desktop/test')
?ggplotly
runApp('C:/Users/xinro/Desktop/test')
?ggplotly
?layout
?legend
runApp('C:/Users/xinro/Desktop/test')
?layout.show
?plotly
?ggplotly
?ggplot
runApp('C:/Users/xinro/Desktop/test')
?add_annotations
?ggplotly
shiny::runApp('GitHub/Spring2018-Project2-spring2018-project2-group2/app')
